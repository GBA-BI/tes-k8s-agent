// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/vetesclient/client.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	models "github.com/GBA-BI/tes-k8s-agent/pkg/vetesclient/models"
	gomock "github.com/golang/mock/gomock"
)

// FakeClient is a mock of Client interface.
type FakeClient struct {
	ctrl     *gomock.Controller
	recorder *FakeClientMockRecorder
}

// FakeClientMockRecorder is the mock recorder for FakeClient.
type FakeClientMockRecorder struct {
	mock *FakeClient
}

// NewFakeClient creates a new mock instance.
func NewFakeClient(ctrl *gomock.Controller) *FakeClient {
	mock := &FakeClient{ctrl: ctrl}
	mock.recorder = &FakeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeClient) EXPECT() *FakeClientMockRecorder {
	return m.recorder
}

// GetTOSSecret mocks base method.
func (m *FakeClient) GetTOSSecret(ctx context.Context, req *models.GetTOSSecretRequest) (*models.GetTOSSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTOSSecret", ctx, req)
	ret0, _ := ret[0].(*models.GetTOSSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTOSSecret indicates an expected call of GetTOSSecret.
func (mr *FakeClientMockRecorder) GetTOSSecret(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTOSSecret", reflect.TypeOf((*FakeClient)(nil).GetTOSSecret), ctx, req)
}

// GetTask mocks base method.
func (m *FakeClient) GetTask(ctx context.Context, req *models.GetTaskRequest) (*models.GetTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, req)
	ret0, _ := ret[0].(*models.GetTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *FakeClientMockRecorder) GetTask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*FakeClient)(nil).GetTask), ctx, req)
}

// ListTasks mocks base method.
func (m *FakeClient) ListTasks(ctx context.Context, req *models.ListTasksRequest) (*models.ListTasksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", ctx, req)
	ret0, _ := ret[0].(*models.ListTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *FakeClientMockRecorder) ListTasks(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*FakeClient)(nil).ListTasks), ctx, req)
}

// PutCluster mocks base method.
func (m *FakeClient) PutCluster(ctx context.Context, req *models.PutClusterRequest) (*models.PutClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCluster", ctx, req)
	ret0, _ := ret[0].(*models.PutClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCluster indicates an expected call of PutCluster.
func (mr *FakeClientMockRecorder) PutCluster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCluster", reflect.TypeOf((*FakeClient)(nil).PutCluster), ctx, req)
}

// UpdateTask mocks base method.
func (m *FakeClient) UpdateTask(ctx context.Context, req *models.UpdateTaskRequest) (*models.UpdateTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, req)
	ret0, _ := ret[0].(*models.UpdateTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *FakeClientMockRecorder) UpdateTask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*FakeClient)(nil).UpdateTask), ctx, req)
}
