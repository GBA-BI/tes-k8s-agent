// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/localstore/localstore.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	localstore "github.com/GBA-BI/tes-k8s-agent/pkg/localstore"
	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// FakeHelper is a mock of Helper interface.
type FakeHelper struct {
	ctrl     *gomock.Controller
	recorder *FakeHelperMockRecorder
}

// FakeHelperMockRecorder is the mock recorder for FakeHelper.
type FakeHelperMockRecorder struct {
	mock *FakeHelper
}

// NewFakeHelper creates a new mock instance.
func NewFakeHelper(ctrl *gomock.Controller) *FakeHelper {
	mock := &FakeHelper{ctrl: ctrl}
	mock.recorder = &FakeHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeHelper) EXPECT() *FakeHelperMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method.
func (m *FakeHelper) DeleteTask(ctx context.Context, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *FakeHelperMockRecorder) DeleteTask(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*FakeHelper)(nil).DeleteTask), ctx, taskID)
}

// GetTask mocks base method.
func (m *FakeHelper) GetTask(ctx context.Context, taskID string) (*localstore.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskID)
	ret0, _ := ret[0].(*localstore.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *FakeHelperMockRecorder) GetTask(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*FakeHelper)(nil).GetTask), ctx, taskID)
}

// RecordTaskExecutorStage mocks base method.
func (m *FakeHelper) RecordTaskExecutorStage(ctx context.Context, taskID string, stage int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTaskExecutorStage", ctx, taskID, stage)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTaskExecutorStage indicates an expected call of RecordTaskExecutorStage.
func (mr *FakeHelperMockRecorder) RecordTaskExecutorStage(ctx, taskID, stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTaskExecutorStage", reflect.TypeOf((*FakeHelper)(nil).RecordTaskExecutorStage), ctx, taskID, stage)
}

// RecordTaskStage mocks base method.
func (m *FakeHelper) RecordTaskStage(ctx context.Context, taskID string, stage int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTaskStage", ctx, taskID, stage)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTaskStage indicates an expected call of RecordTaskStage.
func (mr *FakeHelperMockRecorder) RecordTaskStage(ctx, taskID, stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTaskStage", reflect.TypeOf((*FakeHelper)(nil).RecordTaskStage), ctx, taskID, stage)
}

// StopTask mocks base method.
func (m *FakeHelper) StopTask(ctx context.Context, taskID, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTask", ctx, taskID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTask indicates an expected call of StopTask.
func (mr *FakeHelperMockRecorder) StopTask(ctx, taskID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTask", reflect.TypeOf((*FakeHelper)(nil).StopTask), ctx, taskID, state)
}

// StoreTask mocks base method.
func (m *FakeHelper) StoreTask(ctx context.Context, task *localstore.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTask indicates an expected call of StoreTask.
func (mr *FakeHelperMockRecorder) StoreTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTask", reflect.TypeOf((*FakeHelper)(nil).StoreTask), ctx, task)
}

// StoreType mocks base method.
func (m *FakeHelper) StoreType() client.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreType")
	ret0, _ := ret[0].(client.Object)
	return ret0
}

// StoreType indicates an expected call of StoreType.
func (mr *FakeHelperMockRecorder) StoreType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreType", reflect.TypeOf((*FakeHelper)(nil).StoreType))
}
