// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/offload/offload.go

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// FakeHelper is a mock of Helper interface.
type FakeHelper struct {
	ctrl     *gomock.Controller
	recorder *FakeHelperMockRecorder
}

// FakeHelperMockRecorder is the mock recorder for FakeHelper.
type FakeHelperMockRecorder struct {
	mock *FakeHelper
}

// NewFakeHelper creates a new mock instance.
func NewFakeHelper(ctrl *gomock.Controller) *FakeHelper {
	mock := &FakeHelper{ctrl: ctrl}
	mock.recorder = &FakeHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeHelper) EXPECT() *FakeHelperMockRecorder {
	return m.recorder
}

// DeleteOffloadFile mocks base method.
func (m *FakeHelper) DeleteOffloadFile(taskID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOffloadFile", taskID)
}

// DeleteOffloadFile indicates an expected call of DeleteOffloadFile.
func (mr *FakeHelperMockRecorder) DeleteOffloadFile(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOffloadFile", reflect.TypeOf((*FakeHelper)(nil).DeleteOffloadFile), taskID)
}

// ModifyInputsFiler mocks base method.
func (m *FakeHelper) ModifyInputsFiler(taskID string, podTemplate *v1.PodTemplateSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ModifyInputsFiler", taskID, podTemplate)
}

// ModifyInputsFiler indicates an expected call of ModifyInputsFiler.
func (mr *FakeHelperMockRecorder) ModifyInputsFiler(taskID, podTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyInputsFiler", reflect.TypeOf((*FakeHelper)(nil).ModifyInputsFiler), taskID, podTemplate)
}

// ModifyOutputsFiler mocks base method.
func (m *FakeHelper) ModifyOutputsFiler(taskID string, podTemplate *v1.PodTemplateSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ModifyOutputsFiler", taskID, podTemplate)
}

// ModifyOutputsFiler indicates an expected call of ModifyOutputsFiler.
func (mr *FakeHelperMockRecorder) ModifyOutputsFiler(taskID, podTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOutputsFiler", reflect.TypeOf((*FakeHelper)(nil).ModifyOutputsFiler), taskID, podTemplate)
}

// OffloadInputs mocks base method.
func (m *FakeHelper) OffloadInputs(taskID string, inputsJSON []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OffloadInputs", taskID, inputsJSON)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OffloadInputs indicates an expected call of OffloadInputs.
func (mr *FakeHelperMockRecorder) OffloadInputs(taskID, inputsJSON interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffloadInputs", reflect.TypeOf((*FakeHelper)(nil).OffloadInputs), taskID, inputsJSON)
}

// OffloadOutputs mocks base method.
func (m *FakeHelper) OffloadOutputs(taskID string, outputsJSON []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OffloadOutputs", taskID, outputsJSON)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OffloadOutputs indicates an expected call of OffloadOutputs.
func (mr *FakeHelperMockRecorder) OffloadOutputs(taskID, outputsJSON interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffloadOutputs", reflect.TypeOf((*FakeHelper)(nil).OffloadOutputs), taskID, outputsJSON)
}
