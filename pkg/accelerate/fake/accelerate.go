// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/accelerate/accelerate.go

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	localstore "github.com/GBA-BI/tes-k8s-agent/pkg/localstore"
	models "github.com/GBA-BI/tes-k8s-agent/pkg/vetesclient/models"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	controllerruntime "sigs.k8s.io/controller-runtime"
)

// FakeAccelerator is a mock of Accelerator interface.
type FakeAccelerator struct {
	ctrl     *gomock.Controller
	recorder *FakeAcceleratorMockRecorder
}

// FakeAcceleratorMockRecorder is the mock recorder for FakeAccelerator.
type FakeAcceleratorMockRecorder struct {
	mock *FakeAccelerator
}

// NewFakeAccelerator creates a new mock instance.
func NewFakeAccelerator(ctrl *gomock.Controller) *FakeAccelerator {
	mock := &FakeAccelerator{ctrl: ctrl}
	mock.recorder = &FakeAcceleratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeAccelerator) EXPECT() *FakeAcceleratorMockRecorder {
	return m.recorder
}

// CronCleanFunc mocks base method.
func (m *FakeAccelerator) CronCleanFunc() (func(), *time.Duration) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CronCleanFunc")
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(*time.Duration)
	return ret0, ret1
}

// CronCleanFunc indicates an expected call of CronCleanFunc.
func (mr *FakeAcceleratorMockRecorder) CronCleanFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronCleanFunc", reflect.TypeOf((*FakeAccelerator)(nil).CronCleanFunc))
}

// ModifyExecutor mocks base method.
func (m *FakeAccelerator) ModifyExecutor(podTemplate *v1.PodTemplateSpec, localTask *localstore.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ModifyExecutor", podTemplate, localTask)
}

// ModifyExecutor indicates an expected call of ModifyExecutor.
func (mr *FakeAcceleratorMockRecorder) ModifyExecutor(podTemplate, localTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyExecutor", reflect.TypeOf((*FakeAccelerator)(nil).ModifyExecutor), podTemplate, localTask)
}

// ModifyInputsFiler mocks base method.
func (m *FakeAccelerator) ModifyInputsFiler(podTemplate *v1.PodTemplateSpec, localTask *localstore.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ModifyInputsFiler", podTemplate, localTask)
}

// ModifyInputsFiler indicates an expected call of ModifyInputsFiler.
func (mr *FakeAcceleratorMockRecorder) ModifyInputsFiler(podTemplate, localTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyInputsFiler", reflect.TypeOf((*FakeAccelerator)(nil).ModifyInputsFiler), podTemplate, localTask)
}

// ModifyOutputsFiler mocks base method.
func (m *FakeAccelerator) ModifyOutputsFiler(podTemplate *v1.PodTemplateSpec, localTask *localstore.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ModifyOutputsFiler", podTemplate, localTask)
}

// ModifyOutputsFiler indicates an expected call of ModifyOutputsFiler.
func (mr *FakeAcceleratorMockRecorder) ModifyOutputsFiler(podTemplate, localTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOutputsFiler", reflect.TypeOf((*FakeAccelerator)(nil).ModifyOutputsFiler), podTemplate, localTask)
}

// ModifySyncTask mocks base method.
func (m *FakeAccelerator) ModifySyncTask(ctx context.Context, taskFull *models.Task) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifySyncTask", ctx, taskFull)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifySyncTask indicates an expected call of ModifySyncTask.
func (mr *FakeAcceleratorMockRecorder) ModifySyncTask(ctx, taskFull interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifySyncTask", reflect.TypeOf((*FakeAccelerator)(nil).ModifySyncTask), ctx, taskFull)
}

// OnFinishTask mocks base method.
func (m *FakeAccelerator) OnFinishTask(ctx context.Context, localTask *localstore.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnFinishTask", ctx, localTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnFinishTask indicates an expected call of OnFinishTask.
func (mr *FakeAcceleratorMockRecorder) OnFinishTask(ctx, localTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFinishTask", reflect.TypeOf((*FakeAccelerator)(nil).OnFinishTask), ctx, localTask)
}

// OnProcessTask mocks base method.
func (m *FakeAccelerator) OnProcessTask(ctx context.Context, localTask *localstore.Task) (controllerruntime.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnProcessTask", ctx, localTask)
	ret0, _ := ret[0].(controllerruntime.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnProcessTask indicates an expected call of OnProcessTask.
func (mr *FakeAcceleratorMockRecorder) OnProcessTask(ctx, localTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnProcessTask", reflect.TypeOf((*FakeAccelerator)(nil).OnProcessTask), ctx, localTask)
}
